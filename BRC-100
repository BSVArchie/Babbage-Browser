# üîê BRC-100 Authentication Overview

This document outlines the authentication process between BRC-100-compliant wallets and applications, emphasizing mutual trust, secure communication, and privacy-preserving identity management.

## üéØ Implementation Status

**Current**: Go-based BRC-100 implementation using bitcoin-sv/go-sdk
**Future**: May migrate to Rust for maximum performance and memory safety
**Timeline**: PoC in 2-3 weeks, production-ready with Go

---

## üß© Key Components

### 1. Mutual Authentication
- Both wallet and application verify each other's identity certificates.
- Identity certificates follow **BRC-52/103** standards, enabling **selective disclosure** ‚Äî users reveal only necessary identity data.
- Ensures both parties are trusted before initiating sensitive operations.

### 2. Type-42 Key Derivation (P2P Authentication)
- Wallet and app derive shared child keys using the **Type-42 scheme**.
- Enables secure, encrypted peer-to-peer channels.
- Shared secrets are used to encrypt messages and sign transactions.

### 3. BEEF Format & Atomic Transactions
- Transactions are constructed using **BEEF (Background Evaluation Extended Format)**.
- Ensures atomicity, integrity, and efficient data packaging.
- Wallet signs BEEF actions only after successful authentication.

### 4. SPV (Simplified Payment Verification)
- Verifies relevant blockchain data without downloading the full chain.
- Enables real-time validation of payments and identity proofs.
- Enhances speed and scalability for lightweight clients.

### 5. Authentication API Calls
- Wallet exposes APIs such as:
  - `isAuthenticated()` ‚Äî checks user‚Äôs authentication status.
  - `waitForAuthentication()` ‚Äî blocks until authentication is complete.
- Applications request identity certificates and validate them before proceeding.

### 6. Privacy & Security Enhancements
- Selective disclosure minimizes unnecessary data exposure.
- Certificate revocation and validation mechanisms maintain trust.
- Digital signatures and encryption protect message and transaction integrity.

---

## üîÑ Simplified Workflow

1. App requests the user‚Äôs identity certificate from the wallet.
2. Wallet provides a verifiable certificate with selective disclosure.
3. Both app and wallet derive shared keys using Type-42.
4. App constructs an atomic transaction (BEEF format) with identity context.
5. Wallet signs and returns the transaction.
6. App (or backend) verifies transaction and identity via SPV, then broadcasts.
7. Both parties confirm authenticated and secure session state.

---

## ‚úÖ Optional Enhancements

- **Session Expiry & Re-authentication**: Implement timeouts and re-auth triggers for long-lived sessions.
- **Certificate Pinning**: Cache trusted certificates to prevent MITM attacks.
- **Audit Trails**: Log authentication events for compliance and debugging.
- **Protocol Versioning**: Include protocol IDs (e.g., BRC-44/45/46) to support future upgrades.

---

## üêπ Go Implementation Notes

### bitcoin-sv/go-sdk Integration
- **BEEF Support**: Built-in BEEF format creation and verification
- **SPV Verification**: Simplified Payment Verification with BEEF
- **HD Wallet**: Hierarchical deterministic wallet support
- **Transaction Building**: Advanced transaction construction
- **Performance**: Compiled binary with excellent concurrency support

### Security Considerations
- **Process Isolation**: Go wallet runs in separate daemon process
- **Key Management**: Secure key derivation using PBKDF2
- **Memory Protection**: Private keys never leave Go daemon
- **Type Safety**: Compile-time type checking prevents many errors
- **Future Migration**: May consider Rust for maximum performance if needed

## üöÄ Development Roadmap

### Phase 1: Go PoC (2-3 weeks)
- [ ] Basic wallet creation and key management
- [ ] BEEF transaction support
- [ ] SPV verification implementation
- [ ] BRC-100 authentication flow
- [ ] C++ ‚Üî Go integration

### Phase 2: Production Optimization (Future)
- [ ] Performance optimizations
- [ ] Hardware security module integration
- [ ] Security auditing
- [ ] Consider Rust migration if maximum performance needed

---

## üéØ BRC-100 Authentication Implementation Plan

### **Current Project Analysis**

**‚úÖ What We Have:**
- **Complete Bitcoin SV Wallet**: HD wallet with transaction creation, signing, and broadcasting
- **Process-Per-Overlay Architecture**: Isolated CEF processes for wallet and settings
- **Go Daemon Backend**: HTTP API with wallet management and transaction operations
- **C++ Bridge**: Message handling between frontend and Go daemon
- **Modern UI**: Wallet panel with send/receive functionality and keyboard support

**üéØ What We Need to Add:**
- **BRC-100 Protocol Support**: Identity certificate management and authentication flow
- **BEEF Transaction Support**: Atomic transaction construction and verification
- **Type-42 Key Derivation**: P2P authentication and shared secret generation
- **SPV Verification**: Lightweight blockchain verification for identity proofs
- **App Integration**: Browser-based communication with BRC-100 applications
- **Project Babbage Integration**: Leverage existing identity infrastructure and authentication protocols

### **BRC-100 Authentication Flow Analysis**

**The Complete User Journey:**
1. **User navigates to BRC-100 app** (e.g., on metanetapps.com)
2. **App detects wallet** and requests authentication
3. **Wallet prompts user** for authentication consent
4. **Wallet generates identity certificate** with selective disclosure
5. **Both parties derive shared keys** using Type-42 scheme
6. **App constructs BEEF transaction** with identity context
7. **Wallet signs transaction** and returns to app
8. **App verifies transaction** via SPV and broadcasts
9. **Both parties confirm** authenticated session state

### **Project Babbage Integration Strategy**

**Why Project Babbage is Important:**
- **Identity Infrastructure**: Provides robust identity management and authentication protocols
- **Standards Compliance**: Implements BRC-52/103 identity certificates with selective disclosure
- **Ecosystem Integration**: Widely adopted by Bitcoin SV applications and services
- **Security Best Practices**: Established patterns for secure wallet-to-app communication

**Integration Approach:**
1. **Study Project Babbage APIs**: Understand their identity management and authentication endpoints
2. **Adopt Compatible Standards**: Ensure our implementation follows Project Babbage conventions
3. **Leverage Existing Infrastructure**: Use Project Babbage services where appropriate
4. **Maintain Independence**: Keep our wallet functional without external dependencies

**Key Project Babbage Components to Integrate:**
- **Identity Certificate Management**: BRC-52/103 compliant identity certificates
- **Authentication Protocols**: Standardized wallet-to-app authentication flows
- **Selective Disclosure**: Privacy-preserving identity information sharing
- **Session Management**: Secure session handling and revocation

### **Technical Implementation Strategy**

#### **Phase 1: Core BRC-100 Infrastructure (Week 1-2)**

**1.1 Go Daemon BRC-100 Support**
```go
// New endpoints to add to go-wallet/main.go
POST /brc100/authenticate     // Initiate authentication with app
POST /brc100/identity         // Generate identity certificate
POST /brc100/verify           // Verify app's identity certificate
POST /brc100/session          // Manage authenticated sessions
```

**1.2 Identity Certificate Management**
- **BRC-52/103 Compliance**: Implement selective disclosure identity certificates
- **Project Babbage Integration**: Use Project Babbage identity standards and APIs
- **Certificate Storage**: Store user identity data with privacy controls
- **Revocation Support**: Handle certificate revocation and validation
- **Selective Disclosure**: Implement privacy-preserving identity sharing

**1.3 Type-42 Key Derivation**
- **Shared Secret Generation**: Derive child keys for P2P authentication
- **Encryption Support**: Encrypt/decrypt messages using shared secrets
- **Session Management**: Maintain secure communication channels

#### **Phase 2: BEEF Transaction Support (Week 2-3)**

**2.1 BEEF Format Implementation**
```go
// New BEEF transaction builder
type BEEFTransaction struct {
    Actions    []BEEFAction
    Identity   IdentityContext
    Timestamp  time.Time
    Nonce      string
}
```

**2.2 Atomic Transaction Construction**
- **BEEF Action Support**: Create, sign, and verify BEEF actions
- **Identity Context**: Embed identity information in transactions
- **Atomicity Guarantees**: Ensure all-or-nothing transaction execution

**2.3 SPV Verification**
- **Lightweight Verification**: Verify transactions without full blockchain download
- **Identity Proof Validation**: Validate identity certificates on-chain
- **Real-time Verification**: Fast verification for authentication flows

#### **Phase 3: Browser Integration (Week 3-4)**

**3.1 C++ Bridge Extensions**
```cpp
// New message handlers in simple_handler.cpp
case "brc100_authenticate":
case "brc100_identity_request":
case "brc100_transaction_sign":
case "brc100_session_manage":
```

**3.2 Frontend BRC-100 UI**
- **Authentication Modal**: User consent and identity selection
- **Session Management**: Display active BRC-100 sessions
- **Transaction History**: BRC-100 specific transaction tracking

**3.3 App Communication Protocol**
- **PostMessage API**: Secure communication between browser and BRC-100 apps
- **Event Handling**: Listen for BRC-100 authentication requests
- **Session Persistence**: Maintain authentication state across page reloads

### **Detailed Implementation Steps**

#### **Step 1: Go Daemon BRC-100 Foundation**

**Files to Create/Modify:**
- `go-wallet/brc100_identity.go` - Identity certificate management (Project Babbage compatible)
- `go-wallet/brc100_authentication.go` - Authentication flow logic
- `go-wallet/brc100_beef.go` - BEEF transaction support
- `go-wallet/brc100_spv.go` - SPV verification
- `go-wallet/brc100_babbage.go` - Project Babbage integration
- `go-wallet/main.go` - Add BRC-100 HTTP endpoints

**Key Functions:**
```go
func GenerateIdentityCertificate(userID string, selectiveDisclosure map[string]bool) (*IdentityCertificate, error)
func DeriveSharedKeys(walletKey, appKey []byte) ([]byte, error)
func CreateBEEFTransaction(actions []BEEFAction, identity *IdentityContext) (*BEEFTransaction, error)
func VerifyIdentityCertificate(cert *IdentityCertificate) (bool, error)
func ConnectToProjectBabbage(apiKey string) (*BabbageClient, error)
func SyncWithBabbageIdentity(identity *IdentityCertificate) error
func ValidateBabbageCertificate(cert *BabbageCertificate) (bool, error)
```

#### **Step 2: C++ Bridge Integration**

**Files to Modify:**
- `cef-native/src/handlers/simple_handler.cpp` - Add BRC-100 message handlers
- `frontend/src/bridge/initWindowBridge.ts` - Add BRC-100 API functions

**New API Functions:**
```typescript
window.bitcoinBrowser.brc100 = {
    authenticate: (appDomain: string) => Promise<AuthenticationResult>,
    getIdentity: (selectiveDisclosure: object) => Promise<IdentityCertificate>,
    signBEEFTransaction: (transaction: BEEFTransaction) => Promise<SignedTransaction>,
    getActiveSessions: () => Promise<BRC100Session[]>,
    revokeSession: (sessionId: string) => Promise<boolean>
};
```

#### **Step 3: Frontend BRC-100 Components**

**New Components:**
- `BRC100AuthenticationModal.tsx` - User consent and identity selection
- `BRC100SessionManager.tsx` - Active session management
- `BRC100TransactionHistory.tsx` - BRC-100 specific transactions

**Integration Points:**
- **Wallet Panel**: Add BRC-100 session indicator
- **Settings Panel**: BRC-100 configuration options
- **Main Browser**: Listen for BRC-100 authentication requests

### **Testing Strategy**

#### **Phase 1: Unit Testing**
- **Go Daemon**: Test identity generation, key derivation, BEEF creation
- **C++ Bridge**: Test message handling and API integration
- **Frontend**: Test UI components and user flows

#### **Phase 2: Integration Testing**
- **End-to-End Flow**: Complete authentication flow from app to wallet
- **Error Handling**: Test failure scenarios and recovery
- **Security Testing**: Verify encryption and authentication

#### **Phase 3: Real-World Testing**
- **Metanet Apps**: Test with actual BRC-100 applications
- **Performance Testing**: Measure authentication speed and resource usage
- **User Experience**: Gather feedback on authentication flow

### **Success Metrics**

**Technical Metrics:**
- **Authentication Speed**: < 2 seconds for complete flow
- **Success Rate**: > 99% successful authentications
- **Security**: Zero authentication bypasses or data leaks

**User Experience Metrics:**
- **User Consent**: Clear, understandable authentication prompts
- **Session Management**: Easy session monitoring and revocation
- **Error Recovery**: Graceful handling of authentication failures

### **Risk Mitigation**

**Technical Risks:**
- **BEEF Complexity**: Start with simple BEEF transactions, add complexity gradually
- **SPV Verification**: Implement fallback to full node verification if needed
- **Key Management**: Ensure secure storage and handling of derived keys

**Security Risks:**
- **Identity Leakage**: Implement strict selective disclosure controls
- **Session Hijacking**: Use secure communication channels and session tokens
- **Replay Attacks**: Implement nonce-based protection and timestamp validation

### **Next Steps**

1. **Start with Go Daemon**: Implement basic BRC-100 identity and authentication
2. **Add BEEF Support**: Create BEEF transaction builder and verifier
3. **Integrate with Browser**: Add C++ bridge and frontend components
4. **Test with Real Apps**: Use metanetapps.com for real-world testing
5. **Iterate and Improve**: Refine based on user feedback and testing results

This implementation plan provides a clear roadmap for adding BRC-100 authentication to your Bitcoin SV browser, leveraging your existing wallet infrastructure while adding the necessary protocol support for seamless app authentication.

## üìö References

- [BSV Wallet Toolbox ‚Äì GitHub](https://github.com/bsv-blockchain/wallet-toolbox)
- [BRC-100 Wallet-to-App Interface ‚Äì bsv.brc.dev](https://bsv.brc.dev/wallet/0100)
- [BSV TypeScript SDK Security Best Practices](https://bsv-blockchain.github.io/ts-sdk/guides/security-best-practices/)
- [Bitcoin SV Go SDK ‚Äì GitHub](https://github.com/bitcoin-sv/go-sdk)
- [BEEF Format Documentation](https://docs.bsvblockchain.org/guides/sdks/concepts/beef)
- [Metanet Apps Directory](https://metanetapps.com/) - Target applications for BRC-100 authentication testing
- [Project Babbage Documentation](https://docs.projectbabbage.com/docs) - Identity management and authentication infrastructure
